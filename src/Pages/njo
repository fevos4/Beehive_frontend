import React, { useState } from "react";
import { FaDownload } from "react-icons/fa";
import { Line } from "react-chartjs-2";
import { IoMdAddCircleOutline } from "react-icons/io";
import { IoIosArrowDropright, IoIosArrowDropleft } from "react-icons/io";
import Menus from "./Menus";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";



// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const Dashboard = () => {
  const [isSidebarVisible, setIsSidebarVisible] = useState(true);

  const toggleSidebar = () => {
    setIsSidebarVisible(!isSidebarVisible);
  };

  // Sample data for Weight
  const weightData = {
    labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul"],
    datasets: [
      {
        label: "Weight (KG)",
        data: [45.0, 46.2, 47.8, 49.0, 50.3, 49.7, 50.0],
        borderColor: "#F28C28",
        backgroundColor: "rgba(242, 140, 40, 0.2)",
        tension: 0.5,
        borderWidth: 2,
      },
    ],
  };

  // Sample data for Temperature
  const tempData = {
    labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul"],
    datasets: [
      {
        label: "Temperature (°C)",
        data: [32.1, 33.0, 32.8, 34.5, 35.0, 33.9, 34.2],
        borderColor: "#FF6347",
        backgroundColor: "rgba(255, 99, 71, 0.2)",
        tension: 0.5,
        borderWidth: 2,
      },
    ],
  };

  // Sample data for Humidity
  const humidityData = {
    labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul"],
    datasets: [
      {
        label: "Humidity (RM%)",
        data: [48, 50, 49, 51, 52, 49, 50],
        borderColor: "#4682B4",
        backgroundColor: "rgba(70, 130, 180, 0.2)",
        tension: 0.5,
        borderWidth: 2,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: "top",
      },
    },
    scales: {
      y: {
        beginAtZero: true,
      },
    },
  };

  return (
    <div className="flex">
      {/* Sidebar */}
      <Menus isSidebarVisible={isSidebarVisible} toggleSidebar={toggleSidebar} />
      {/* Main Content */}
      <main
        className={`ml-0 mt-[40px] w-full bg-cream py-4 px-6 font-montserrat transition-margin duration-300 ${
          isSidebarVisible ? "ml-[250px]" : "ml-0"
        }`}
      >
        {/* Header */}
        <div className="flex gap-6">
          <button onClick={toggleSidebar} className="text-gray-900 cursor-pointer h-16 text-lg">
            {isSidebarVisible ? <IoIosArrowDropleft className="w-6 h-6"/> : <IoIosArrowDropright className="w-6 h-6"/>}
          </button>
          <div className="w-full max-w-[1200px] h-16 bg-gray-200 flex items-center justify-between px-6 rounded-lg shadow-md mb-6">
            <span className="text-lg font-medium flex items-center">
              <span className="mr-2">&#128100;</span> Name, Hive 1
            </span>
            <div className="flex gap-4">
            <IoMdAddCircleOutline className="w-5 h-5" />
            <FaDownload/>
            </div>
            
          </div>
          
        </div>

        {/* Content */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 w-full max-w-[1200px] font-montserrat">
          {/* Weight Section */}
          <div className="bg-gray-100 p-6 rounded-lg shadow-md flex flex-col">
            <h3 className="text-[#F28C28] text-xl font-medium mb-2">Weight</h3>
            <p className="text-4xl font-bold text-gray-800 mb-4">49.7 KG</p>
            <div className="flex-grow">
              <Line data={weightData} options={options} />
            </div>
          </div>

          {/* Temperature Section */}
          <div className="bg-gray-100 p-6 rounded-lg shadow-md flex flex-col">
            <h3 className="text-[#FF6347] text-xl font-medium mb-2">
              Internal Temperature
            </h3>
            <p className="text-4xl font-bold text-gray-800 mb-4">33.9°C</p>
            <div className="flex-grow">
              <Line data={tempData} options={options} />
            </div>
          </div>

          {/* Humidity Section */}
          <div className="bg-gray-100 p-6 rounded-lg shadow-md flex flex-col">
            <h3 className="text-[#4682B4] text-xl font-medium mb-2">
              Humidity
            </h3>
            <p className="text-4xl font-bold text-gray-800 mb-4">49 RM%</p>
            <div className="flex-grow">
              <Line data={humidityData} options={options} />
            </div>
          </div>

          {/* External Temperature Section */}
          <div className="bg-gray-100 p-6 rounded-lg shadow-md flex flex-col">
            <h3 className="text-[#FF6347] text-xl font-medium mb-2">
              External Temperature
            </h3>
            <p className="text-4xl font-bold text-gray-800 mb-4">33.9°C</p>
            <div className="flex-grow">
              <Line data={tempData} options={options} />
            </div>
          </div>
        </div>

        <div className="mt-10 mb-10 font-montserrat">
          <h1>There will be prediction text here</h1>
        </div>
      </main>
    </div>
  );
};

export default Dashboard;




// Dashboard.js
import React, { useState } from "react";
import { FaDownload } from "react-icons/fa";
import { Line } from "react-chartjs-2";
import { IoMdAddCircleOutline } from "react-icons/io";
import { IoIosArrowDropright, IoIosArrowDropleft } from "react-icons/io";
import Menus from "./Menus";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const Dashboard = () => {
  const [isSidebarVisible, setIsSidebarVisible] = useState(false);

  const toggleSidebar = () => {
    setIsSidebarVisible(!isSidebarVisible);
  };

  const closeSidebar = (e) => {
    if (isSidebarVisible && e.target.id === "overlay") {
      setIsSidebarVisible(false);
    }
  };

  return (
    <div className="flex relative" onClick={closeSidebar}>
      {/* Sidebar & Overlay */}
      {isSidebarVisible && <div id="overlay" className="fixed inset-0 bg-black bg-opacity-50 z-10 md:hidden"></div>}
      <Menus isSidebarVisible={isSidebarVisible} toggleSidebar={toggleSidebar} />
      
      {/* Main Content */}
      <main className={`w-full min-h-screen transition-all duration-300 ${isSidebarVisible ? "ml-64 md:ml-0" : "ml-0"}`}>
        <div className="flex items-center gap-4 p-4 shadow-md bg-white sticky top-0 z-20">
          <button onClick={toggleSidebar} className="text-gray-900 cursor-pointer text-2xl">
            {isSidebarVisible ? <IoIosArrowDropleft /> : <IoIosArrowDropright />}
          </button>
          <h1 className="text-lg font-semibold">Dashboard</h1>
        </div>
        
        {/* Dashboard Content */}
        <div className="p-4 grid grid-cols-1 sm:grid-cols-2 gap-6 md:grid-cols-2 lg:grid-cols-2">
          {/* Example Chart Section */}
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-medium mb-2">Weight</h3>
            <p className="text-3xl font-bold mb-4">49.7 KG</p>
            <Line data={{ labels: ["Jan", "Feb", "Mar", "Apr"], datasets: [{ label: "Weight", data: [45, 46, 47, 48], borderColor: "#F28C28", backgroundColor: "rgba(242, 140, 40, 0.2)", tension: 0.5 }] }} />
          </div>
        </div>
      </main>
    </div>
  );
};

export default Dashboard;